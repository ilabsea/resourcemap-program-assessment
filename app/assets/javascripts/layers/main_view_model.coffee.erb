onLayers ->
  class @MainViewModel
    constructor: (collectionId, layers, collectionList) ->
      @collectionId = collectionId
      @fields = ko.observableArray()
      @layers = ko.observableArray $.map(layers, (x) => new Layer(x, @))
      @updateLayerDeletable()
      @currentLayer = ko.observable()
      @bufferNewLayer = ko.observable()
      @bufferNewField = ko.observable()
      @currentField = ko.observable()
      @default_select = '(no value)'
      @newOption = ko.observable(new Option)
      @newFieldLogic = ko.observable(new FieldLogic)
      @newFieldValidation = ko.observable(new FieldValidation)
      @newAttribute = ko.observable(new Attribute)
      @collectionList = window.collectionList
      @optionValid = ko.computed =>
        $.trim(@newOption().code()).length > 0 && $.trim(@newOption().label()).length > 0

      @fieldLogicValid = ko.computed =>
        ($.trim(@newFieldLogic().value()).length > 0 || $.trim(@newFieldLogic().condition_type()).length > 0) && $.trim(@newFieldLogic().field_id()).length > 0

      @fieldCustomValidationValid = ko.computed =>
        $.trim(@newFieldValidation().condition_type()).length > 0 && $.trim(@newFieldValidation().field_id()).length > 0

      @fieldSelectManyLogicValid = ko.computed =>
        true

      @attributeValid = ko.computed =>
        $.trim(@newAttribute().key()).length > 0 && $.trim(@newAttribute().value()).length > 0 && not Attribute.find(@currentField().impl().attributes(), @newAttribute())

      @optionsLayers = ko.observableArray $.map(@layers(), (l) -> [[l.name(), l.id()]])

      @currentFieldMarginTop = ko.computed =>
        if @currentLayer()
          idx = @currentLayer().fields().indexOf(@currentField())
          margin = idx * 73
          margin += 3 if idx > 0
          "#{margin}px"
        else
          0

      @tmpSelectedField = ko.observable()

      @fieldList = ko.computed =>
        return @currentLayer()?.fields() ? []

      @customWidgetedFields = ko.computed =>
        @fieldList().filter (f) => f.custom_widgeted()

      @selectedCustomWidgetField = ko.observable()
      @selectedCollectionCustomAggregator = ko.observable()

      @savingLayer = ko.observable(false)

      @selectLogicLayers = ko.computed =>
        if @currentLayer()
          if @currentLayer().id()
            @layers()
          else
            @layers().filter (layer) => typeof layer.id() isnt 'undefined'
        else
          []

      @selectNumericLayers = ko.computed =>
        if @currentLayer()
          if @currentLayer().id()
            @layers()
          else
            @layers().filter (layer) => typeof layer.id() isnt 'undefined'
        else
          []

      @isAddNew = ko.observable(false)
      @isAddNewValidation = ko.observable(false)
      @is_editing = ko.computed =>
        if @currentField() and @currentField().kind == "select_many"
          for f in @currentField().impl().selected_field_logics()
            if f.editing() == true
              return true
          if @currentField().impl().field_logics().length > 0
            return true
          return false
        return false

      @isShowingCopyForm = ko.observable(false)


    addCustomWidgetedFieldItem: =>
      window.currentField = @currentField().impl()
      if @selectedCustomWidgetField()
        fieldCode = @selectedCustomWidgetField().code()
        pattern = @addPatternToText(fieldCode)
        searchField = @isExistInWidget(pattern)
        if searchField?
          if searchField == @currentField()
            @currentField().widgetMappingerror("This widget field is already used in this field.")
          else
            @currentField().widgetMappingerror("This widget field is already used in field #{searchField.name()}.")
        else
          @currentField().widgetMappingerror("")
          @addTextToCustomWidgetedEditor(pattern)
      else
        alert("Please select a field")

    isExistInWidget: (pattern) ->
      for field in @currentLayer().widgetFields()
        result = field.impl().widgetContent().split(pattern)
        return field if result.length > 1
      return null

    addTextToCustomWidgetedEditor: (pattern) ->
      window.activeEditor.execCommand('mceInsertContent', false, pattern)

    addPatternToText: (text) ->
      "{#{text}}"

    updateLayerDeletable: =>
      if @layers().length == 1
        @layers()[0].deletable(true)
      dependent_fields = []
      $.map(@layers(), (x,index) =>
        fields = @changeEditableAndDeletableField(x.fields())
        dependent_fields = dependent_fields.concat(fields)
      )
      $.map(@layers(), (x, index) =>
        fields = x.fields()
        new_fields = []
        $.map(fields, (f) =>
          if $.inArray(f.id().toString(), dependent_fields) != -1
            f.editableCode(false)
            f.deletable(false)
          new_fields.push(f)
        )
        @layers()[index].fields(new_fields)
      )

    changeEditableAndDeletableField: (fields) =>
      used_fields = []
      $.map(fields, (x) =>
        if x.kind() == "calculation"
          if x["config"]["dependent_fields"]
            $.map(x["config"]["dependent_fields"], (f) ->
              used_fields.push(f["id"])
            )
      )
      return used_fields

    alertCannotDelete: (field) =>
      alert("Field can not be deleted. It is being used by calculation field.")

    findFieldById: (fieldId) =>
      return field for field in @fields() when field.id == fieldId

    addDependentField: (field) =>
      field_id =$("#calculation_field").val()
      for l in @selectLogicLayers()
        for f in l.fields()
          if parseInt(f.id()) == parseInt(field_id)
            @currentField().impl().addDependentField(f)
            return
    newLayer: =>
      layer = new Layer ord: (@layers().length + 1)
      @layers.push(layer)
      @currentLayer(layer)
      layer.hasFocus(true)
      @isShowingCopyForm(false)

    editLayer: (layer) =>
      @isShowingCopyForm(false)
      $.get "/collections/#{collectionId}/layers/#{layer.id()}.json", {}, (l) =>
        @originalFields = $.map(l["fields"], (x) -> new Field(layer, x))
        if l["fields"]
          fields = ko.observableArray($.map(l["fields"], (x) => new Field(layer, x)))
          numeric_fields = ko.observableArray($.map(l["fields"], (f) => f if f.kind == 'numeric'))
          support_skiplogic_fields = ko.observableArray($.map(l["fields"], (f) => f if (f.kind == 'numeric' or f.kind == 'yes_no' or f.kind == 'select_one' or f.kind == 'select_many')))
          layer.fields(fields())
          layer.numeric_fields(numeric_fields())
          layer.support_skiplogic_fields(support_skiplogic_fields())
        else
        @currentLayer(layer)
        @currentField(layer.fields()[0]) if layer.fields().length > 0
        layer.hasFocus(true)

    expandAllField: (layer) =>
      console.log(layer)

    cancelLayer: =>
      if @currentLayer().id()
        @currentLayer().fields.removeAll()
        @currentLayer().fields.push(field) for field in @originalFields
      else
        @layers.remove(@currentLayer()) unless @currentLayer().id()
      @currentLayer(null)
      @currentField(null)

    saveLayer: =>
      @savingLayer(true)
      json = {layer: @currentLayer().toJSON()}
      if @currentLayer().id()
        json._method = 'put'
        $.post "/collections/#{@collectionId}/layers/#{@currentLayer().id()}.json", json, @saveLayerCallback
      else
        $.post "/collections/#{@collectionId}/layers.json", json, @saveLayerCallback

    saveLayerCallback: (data) =>
      #if layer is new, we need to set id
      if @currentLayer().id()
        $.status.showNotice(window.t('javascripts.layers.successfully_saved', {name: @currentLayer().name()}), 2000)
      else
        $.status.showNotice(window.t('javascripts.layers.successfully_created', {name: @currentLayer().name()}), 2000)
      @currentLayer().id(data.id)

      layersToReloadOrder = [@currentLayer()]

      i = 0
      while i < @currentLayer().fields().length
        field = @currentLayer().fields()[i]
        dataField = (dataField for dataField in data.fields when dataField.code is field.code())
        if dataField.length
          i += 1
          #if field is new, we need to set id
          field.id(dataField[0].id)
        else
          field.layer().fields.push(field)
          layersToReloadOrder.push(field.layer())
          field.layer().total(field.layer().total()+1)
          @currentLayer().fields.remove(field)
          # i does not change because we just removed an element

      @currentLayer().total(@currentLayer().fields().length)
      @reloadOrder(layer) for layer in layersToReloadOrder

      @currentLayer(null)
      @currentField(null)

      @savingLayer(false)

    saveLayerOrd: (layer) =>
      json = {ord: layer.ord()}

      json._method = 'put'
      $.post "/collections/#{@collectionId}/layers/#{layer.id()}/set_order.json", json

    deleteLayer: (layer) =>
      # if confirm("This layer is being used with #{layer.threshold_ids.length} alerts. The alert associated with this layer will also be deleted.")
      if layer.threshold_ids.length == 0 && layer.query_ids.length == 0 && layer.report_query_ids.length == 0
        $.post "/collections/#{@collectionId}/layers/#{layer.id()}", {threshold_ids: layer.threshold_ids, _method: 'delete'}, =>
          idx = @layers().indexOf(layer)
          for nextLayer in @layers().slice(idx + 1)
            nextLayer.ord(nextLayer.ord() - 1)
            @saveLayerOrd(nextLayer)

          @layers.remove(layer)

          $.status.showNotice("Layer '#{layer.name()}' successfully deleted", 2000)
      else
        if layer.threshold_ids.length > 0
          $.status.showError("This layer is being used with #{layer.threshold_ids.length} alert(s), you are not allowed to delete", 2000)
        else if layer.query_ids.length > 0
          $.status.showError("This layer is being used with #{layer.query_ids.length} canned query(s), you are not allowed to delete", 2000)
        else if layer.report_query_ids.length > 0
          $.status.showError("This field is being used with #{layer.report_query_ids.length} report query(s), you are not allowed to delete", 2000)


    copyField: (field)=>
      name = "Copy " + field.name()
      code = "copy_" + field.code()
      ord = field.ord() + 1
      index = model.currentLayer().fields().indexOf(field)
      fieldJSON =  @modifyFieldLogic(field.toJSON())
      tmpField = new Field(model.currentLayer, field.toJSON())

      tmpField.name(name)
      tmpField.code(code)
      tmpField.id(undefined)
      tmpField.ord(ord)
      @moveOrd(ord, @currentLayer().fields())
      model.currentLayer().fields.splice((index+1),0,tmpField)

    copyLayer: (layer)=>
      if layer.fields().length < parseInt(layer.total())
        # get all the fields before copy
        $.get "/collections/#{collectionId}/layers/#{layer.id()}.json", {}, (l) =>
          f = ko.observableArray($.map(l["fields"], (x) => new Field(layer, x)))
          layer.fields(f())
          @copyLayerCallback(layer)
      else
        @copyLayerCallback(layer)

    copyLayerCallback: (layer)=>
      layerJSON = layer.toJSON()
      layerJSON["fields"] = layerJSON["fields_attributes"]
      delete layerJSON["fields_attributes"]
      $.map(layerJSON["fields"], (f) =>
        f = @modifyFieldLogic(f)
      )
      @bufferNewLayer(new Layer(layerJSON, @))

      @bufferNewLayer().name(layer.name())
      @bufferNewLayer().total(layer.total())
      data = @append_copy()
      @bufferNewLayer(data["layer"])
      @bufferNewLayer().ord(@layers().length + 1)
      @bufferNewLayer().id(undefined)
      @bufferNewLayer().modifyDependentFieldCustomWidget(data["changed_fields"])
      @savingLayer(true)
      json = {layer: @bufferNewLayer().toJSON()}
      $.post "/collections/#{@collectionId}/layers.json", json, @saveCopyLayerCallback

    modifyFieldLogic: (field) =>
      if field.is_enable_field_logic
        if field.config
          fieldLogics = field.config.field_logics
          $.map(fieldLogics, (f) =>
            if f.field_id.length == 1
              f.field_id = f.field_id[0].toString()
            else
              f.field_id = f.field_id.toString()
          )
      return field

    moveOrd: (ord, objs) =>
      $.map(objs, (f) =>
        if f.ord() >= ord
          f.ord(f.ord() + 1)
      )

    saveCopyLayerCallback: (data) =>
      #if layer is new, we need to set id
      $.status.showNotice(window.t('javascripts.layers.successfully_copied', {name: @bufferNewLayer().name()}), 2000)
      @bufferNewLayer().id(data.id)
      layersToReloadOrder = [@bufferNewLayer()]

      i = 0
      while i < @bufferNewLayer().fields().length
        field = @bufferNewLayer().fields()[i]
        dataField = (dataField for dataField in data.fields when dataField.code is field.code())
        if dataField.length
          i += 1
          #if field is new, we need to set id
          field.id(dataField[0].id)
        else
          field.layer().fields.push(field)
          layersToReloadOrder.push(field.layer())
          @bufferNewLayer().fields.remove(field)
          # i does not change because we just removed an element

      @reloadOrder(layer) for layer in layersToReloadOrder
      @savingLayer(false)
      @layers.push(@bufferNewLayer())

    append_copy: () =>
      track_field = ko.observableArray()
      appendName = @generateUniqueLayerName(@bufferNewLayer().name(), 0)
      layerName = @bufferNewLayer().name() + appendName
      @bufferNewLayer().name(layerName)
      $.map(@bufferNewLayer().fields(), (f) =>
        old_code = f.code()
        f.name(f.name() + appendName)
        f.code(f.code() + appendName)
        f.id(undefined)
        if(f.kind() == "numeric" or f.kind() == "select_one")
          track_field.push({"old_field" : old_code, "new_field" : f.code()})
      )
      return {"layer": @bufferNewLayer(), "changed_fields" : track_field()}

    generateUniqueLayerName: (name, i)=>
      append = "_copy_" + i
      newName = name + append
      if @existedLayerName(newName)
        i = i + 1
        return @generateUniqueLayerName(name, i)
      else
        return append

    existedLayerName: (name) =>
      match = false
      $.map(@layers(), (l) =>
        if(l.name().trim() == name.trim())
          match = true
      )
      return match
    selectingLayer: =>
      alert 'selectingLayer'

    isFirstLayer: (layer) => layer.ord() == 1
    isLastLayer: (layer) => layer.ord() == @layers().length

    moveLayerDown: (layer) =>
      nextLayer = @layers()[layer.ord()]
      layer.ord(layer.ord() + 1)
      nextLayer.ord(nextLayer.ord() - 1)
      @saveLayerOrd(layer)
      @saveLayerOrd(nextLayer)
      @layers.sort((x, y) -> if x.ord() < y.ord() then -1 else 1)

    moveLayerUp: (layer) =>
      @moveLayerDown @layers()[layer.ord() - 2]

    isFirstField: (layer, field) => field.ord() == layer.fields()[0].ord()
    isLastField: (layer, field) => field.ord() == layer.lastFieldOrd

    findFieldIndexByOrd: (ord) =>
      for f,index in @currentLayer().fields()
        if f.ord() == ord
          return index
      return -1

    moveFieldDown: (field) =>
      index = @findFieldIndexByOrd(field.ord())
      if index > -1
        nextField = @currentLayer().fields()[index+1]
        field.ord(field.ord() + 1)
        nextField.ord(nextField.ord() - 1)
        @currentLayer().fields.sort((x, y) -> if x.ord() < y.ord() then -1 else 1)

    moveFieldUp: (field) =>
      index = @findFieldIndexByOrd(field.ord())
      if index > -1
        @moveFieldDown @currentLayer().fields()[index-1]

    moveFieldCrossLayer: (field, destinationLayer) =>
      field.ord(destinationLayer.lastFieldOrd + 1)
      field.layer().lastFieldOrd = field.ord

    newField: (kind) =>
      if @currentField()
        ord = @currentField().ord() + 1
        index = @currentLayer().fields().indexOf(@currentField())
        @currentField(new Field(@currentLayer(), kind: kind, ord: ord))
        @moveOrd(ord, @currentLayer().fields())
        @currentLayer().fields.splice((index+1),0,@currentField())
        @currentField().hasFocus(true)
      else
        @currentField(new Field(@currentLayer(), kind: kind, ord: @currentLayer().fields().length + 1))
        @currentLayer().fields.push(@currentField())
        @currentField().hasFocus(true)
    selectField: (field) =>
      @isAddNew(false)
      @currentField(field)
      @currentField().hasFocus(true)

    reloadOrder: (layer) =>
      i = 1
      for field in layer.fields()
        field.ord(i)
        i += 1

    deleteField: (field) =>
      if field.threshold_ids.length == 0 && field.query_ids.length == 0 && field.report_query_ids.length == 0
        idx = @currentLayer().fields().indexOf(field)
        nextField.ord(nextField.ord() - 1) for nextField in @currentLayer().fields().slice(idx + 1)
        @currentLayer().fields.remove(field)
        if @currentLayer().fields().length == 0
          @currentField(null)
        else
          idx -= 1 if idx >= @currentLayer().fields().length
          @currentField(@currentLayer().fields()[idx])
          @currentField().hasFocus(true)
      else
        if field.threshold_ids.length > 0
          $.status.showError("This field is being used with #{field.threshold_ids.length} alert(s), you are not allowed to delete", 2000)
        else if field.query_ids.length > 0
          $.status.showError("This field is being used with #{field.query_ids.length} canned query(s), you are not allowed to delete", 2000)
        else if field.report_query_ids.length > 0
          $.status.showError("This field is being used with #{field.report_query_ids.length} report query(s), you are not allowed to delete", 2000)

    newOptionKeyPress: (field, event) =>
      switch event.keyCode
        when 13 then @addOption()
        else true

    newAttributeKeyPress: (field, event) =>
      switch event.keyCode
        when 13 then @addAttribute()
        else true

    optionBlur: (option) =>
      option.editing(false)
      if $.trim(option.code()).length == 0 && $.trim(option.length()).length == 0
        @removeOption(option)

    attributeBlur: (attribute) =>
      attribute.editing(false)
      if $.trim(attribute.code()).length == 0 && $.trim(attribute.length()).length == 0
        @removeAttribute(attribute)

    addOption: =>
      return unless @optionValid()
      @newOption().hasFocus = false
      @currentField().impl().addOption(@newOption())
      option = new Option
      option.hasFocus(true)
      @newOption(option)

    addFieldLogic: =>
      field_logic = new FieldLogic
      @newFieldLogic(field_logic)
      @isAddNew(true)

    addFieldValidation: =>
      field_validation = new FieldValidation
      @newFieldValidation(field_validation)
      @isAddNewValidation(true)

    createNewFieldLogic: =>
      field_logic = new FieldLogic
      @newFieldLogic(field_logic)
      @currentField().impl().add_field_logic(@newFieldLogic())
      @newFieldLogic().condition_type("all")
      $("#all")[0].checked = true

    assignConditionAll: =>
      @newFieldLogic().condition_type("all")
      $("#all")[0].checked = true

    assignConditionAny: =>
      @newFieldLogic().condition_type("any")
      $("#any")[0].checked = true

    saveNewFieldLogic: =>

    addOptionFieldLogic: (field) =>
      option = $.map(@currentField().impl().options(), (x) -> x if x.id() == field.value())
      if option.length > 0
        field_logic_value = new FieldLogicValue(
          label:option[0].label()
          value: option[0].id()
        )
        tmp = @newFieldLogic().selected_options()
        tmp.push(field_logic_value)
        @newFieldLogic().selected_options([])
        @newFieldLogic().selected_options(tmp)


    removeOptionFieldLogic: (field) =>
      @newFieldLogic().selected_options.remove(field)

    saveFieldLogic: (field_logic) =>
      error = @validateFieldLogic(field_logic)
      if error["status_failed"]
        field_logic.valid(false)
        field_logic.error(error["detail"])
      else
        field_logic.editing(false)
        @currentField().impl().saveFieldLogic(field_logic)
        @isAddNew(false)

    saveFieldValidation: (field_validation) =>
      field_validation.editing(false)
      @currentField().impl().saveFieldValidation(field_validation)
      @isAddNewValidation(false)

    to_field_name: (field) =>
      if @currentLayer()
        for l in @layers()
          f = $.map(l.fields(), (x) -> x if x.id() == parseInt(field()[0]))
          if(f.length > 0)
            return f[0].name()
      return ""

    editFieldLogic: (field) =>
      field.editing(true)
      @newFieldLogic(new FieldLogic)
      @newFieldLogic().id(field.id())
      @newFieldLogic().field_id(field.field_id())
      @newFieldLogic().value(field.value())
      @newFieldLogic().condition_type(field.condition_type())

    editFieldValidation: (field) =>
      field.editing(true)
      @newFieldValidation(new FieldValidation)
      @newFieldValidation().id(field.id())
      @newFieldValidation().field_id(field.field_id())
      @newFieldValidation().condition_type(field.condition_type())

    cancelFieldValidation: (field) =>
      field_validation = @newFieldValidation()
      if field_validation.id()?
        field.field_id(field_validation.field_id())
        field.condition_type(field_validation.condition_type())
      else
        @isAddNewValidation(false)
      field.editing(false)

    cancelFieldLogic: (field) =>
      field_logic = @newFieldLogic()
      if field_logic.id()?
        field.value(field_logic.value())
        field.field_id(field_logic.field_id())
        field.condition_type(field_logic.condition_type())
      else
        @isAddNew(false)

      field.editing(false)
    updateFieldLogic: (field) =>
      field.editing(false)

    addAttribute: =>
      return unless @attributeValid()
      @newAttribute().hasFocus = false
      @currentField().impl().addAttribute(@newAttribute())
      attribute = new Attribute
      attribute.hasFocus(true)
      @newAttribute(attribute)

    removeOption: (option) =>
      @currentField().impl().options.remove(option)
      @newOption().hasFocus(true)

    removeFieldLogic: (field_logic) =>
      @currentField().impl().field_logics.remove(field_logic)

    removeFieldValidation: (field_validation) =>
      @currentField().impl().field_validations.remove(field_validation)

    removeSelectedFieldLogic: (field_logic) =>
      @currentField().impl().selected_field_logics.remove(field_logic)

    removeAttribute: (attribute) =>
      @currentField().impl().attributes.remove(attribute)
      @newAttribute().hasFocus(true)

    startUploadHierarchy: =>
      @currentField().impl().uploadingHierarchy(true)

    hierarchyUploaded: (hierarchy) =>
      @currentField().impl().setHierarchy(hierarchy)

    errorUploadingHierarchy: (hierarchy_errors) =>
      @currentField().impl().uploadingHierarchy(false)
      @currentField().impl().errorUploadingHierarchy(true)

      $('.error_description_bubble').CreateBubblePopup({
        selectable: true,
        position : 'top',
        innerHtml: hierarchy_errors,
        innerHtmlStyle: {
            color:'#000000',
            'background-color' :'white'
            },
        themeName:  'bubble',
        themePath:  '<%= InsteddRails.url %>/theme/images/'

      });

    startUploadLocation: =>
      @currentField().impl().uploadingLocation(true)

    locationUploaded: (location) =>
      @currentField().impl().setLocation(location)

    errorUploadingLocation: (locations_errors) =>
      @currentField().impl().uploadingLocation(false)
      @currentField().impl().errorUploadingLocation(true)

      $('.error_description_bubble').CreateBubblePopup({
        selectable: true,
        position : 'top',
        innerHtml: locations_errors,
        innerHtmlStyle: {
            color:'#000000',
            'background-color' :'white'
            },
        themeName:  'bubble',
        themePath:  '<%= InsteddRails.url %>/theme/images/'

      });

    change: =>
      alert 'test'

    validateFieldLogic: (field_logic) =>
      error = {}
      field_logic_id = field_logic.field_id()[0]
      $.map(model.layers(), (x, index) =>
        fields = x.fields()
        $.map(fields, (f) =>
          if f.id() == field_logic_id
            fieldLogicValue = field_logic.value();
            if f.kind() == "numeric"
              if isNaN(fieldLogicValue)
                error["status_failed"] = true
                error["detail"] = "Field logic value is not numeric value."
            if f.kind() == "yes_no"
              if parseInt(fieldLogicValue) != 1 and parseInt(fieldLogicValue) != 0 and fieldLogicValue.toUpperCase() != 'Y' and fieldLogicValue.toUpperCase() != 'YES' and fieldLogicValue.toUpperCase() != 'N' and fieldLogicValue.toUpperCase() != 'NO'
                error["status_failed"] = true
                error["detail"] = "Field logic value for Yes_No support only 1, 0, Yes, Y ,No ,and N."
            if f.kind() == "select_one"
              status = false
              codeList = []
              $.map(f.config.options, (option) =>
                codeList.push(option.code)
                if(option.code == fieldLogicValue)
                  status = true
              )
              if !status
                error["status_failed"] = true
                error["detail"] = "Field logic value for Select one support only #{codeList.join(',')}."
            if f.kind() == "select_many"
              status = true
              codeList = []
              errors = []
              logic_options = fieldLogicValue.split(",")
              $.map(f.config.options, (option) =>
                codeList.push(option.code)
              )
              $.map(logic_options, (val) =>
                if(!codeList.includes(val))
                  errors.push(val)
                  status = false
              )
              if !status
                error["status_failed"] = true
                error["detail"] = "Field logic value for Select many support only #{codeList.join(',')}. The value #{errors.join(',')} is not support."

        )
      )
      return error

    showCopyLayerForm: =>
      @isShowingCopyForm(true)

    copyLayerToNewCollection: =>
      newCollectionName= $('#newCollectionName').val().trim()
      collectionId = @collectionId
      if newCollectionName != ''
        @progressCopyCollection()
        $.get "/collections/#{collectionId}/copy", {new_collection_name: newCollectionName}, (data) =>
          @successCopyCollection(data)
      else
        $('#copy_error_message').text("Please input the new collection's name")

    progressCopyCollection: ->
      $('#copy_progress').show()
      $('#form_copy').hide()
      $('#browse_copy_collection').hide()

    successCopyCollection: (data) =>
      $('#copy_progress').hide()
      $('#form_copy').hide()
      $('#success_copy_notice_message').text("This collection's layers are successfully copied to collection '#{data["name"]}'")
      $("#btn_browse_collection").prop("href", "/collections?collection_id=#{data["id"]}")
      $('#browse_copy_collection').show()
